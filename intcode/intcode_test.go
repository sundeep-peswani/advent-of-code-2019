package intcode

import (
	"fmt"
	"testing"
)

func Test_Intcode(t *testing.T) {
	tests := []struct {
		testCase      string
		program       string
		expected      []int
		input, output []int
	}{
		{"Day 2: 70 * 50 = 3500", "1,9,10,3,2,3,11,0,99,30,40,50", []int{3500, 9, 10, 70, 2, 3, 11, 0, 99, 30, 40, 50}, []int{}, []int{}},
		{"Day 2: 1 + 1 = 2", "1,0,0,0,99", []int{2, 0, 0, 0, 99}, []int{}, []int{}},
		{"Day 2: 3 * 2 = 6", "2,3,0,3,99", []int{2, 3, 0, 6, 99}, []int{}, []int{}},
		{"Day 2: 99 * 99 = 9801", "2,4,4,5,99,0", []int{2, 4, 4, 5, 99, 9801}, []int{}, []int{}},
		{"Day 2: 5 * 6 = 30", "1,1,1,4,99,5,6,0,99", []int{30, 1, 1, 4, 2, 5, 6, 0, 99}, []int{}, []int{}},
		{"Day 5: store input", "3,0,4,0,99", []int{50, 0, 4, 0, 99}, []int{50}, []int{50}},
		{"Day 5: 33 * 3 = 99", "1002,4,3,4,33", []int{1002, 4, 3, 4, 99}, []int{}, []int{}},
		{"Day 5: store and halt", "1101,100,-1,4,0", []int{1101, 100, -1, 4, 99}, []int{}, []int{}},
		{"Day 5: position mode, 7 == 8", "3,9,8,9,10,9,4,9,99,-1,8", []int{3, 9, 8, 9, 10, 9, 4, 9, 99, 0, 8}, []int{7}, []int{0}},
		{"Day 5: position mode, 8 == 8", "3,9,8,9,10,9,4,9,99,-1,8", []int{3, 9, 8, 9, 10, 9, 4, 9, 99, 1, 8}, []int{8}, []int{1}},
		{"Day 5: position mode, 9 == 8", "3,9,8,9,10,9,4,9,99,-1,8", []int{3, 9, 8, 9, 10, 9, 4, 9, 99, 0, 8}, []int{9}, []int{0}},
		{"Day 5: position mode, 7 < 8", "3,9,7,9,10,9,4,9,99,-1,8", []int{3, 9, 7, 9, 10, 9, 4, 9, 99, 1, 8}, []int{7}, []int{1}},
		{"Day 5: position mode, 8 < 8", "3,9,7,9,10,9,4,9,99,-1,8", []int{3, 9, 7, 9, 10, 9, 4, 9, 99, 0, 8}, []int{8}, []int{0}},
		{"Day 5: position mode, 9 < 8", "3,9,7,9,10,9,4,9,99,-1,8", []int{3, 9, 7, 9, 10, 9, 4, 9, 99, 0, 8}, []int{9}, []int{0}},
		{"Day 5: immediate mode, 7 == 8", "3,3,1108,-1,8,3,4,3,99", []int{3, 3, 1108, 0, 8, 3, 4, 3, 99}, []int{7}, []int{0}},
		{"Day 5: immediate mode, 8 == 8", "3,3,1108,-1,8,3,4,3,99", []int{3, 3, 1108, 1, 8, 3, 4, 3, 99}, []int{8}, []int{1}},
		{"Day 5: immediate mode, 9 == 8", "3,3,1108,-1,8,3,4,3,99", []int{3, 3, 1108, 0, 8, 3, 4, 3, 99}, []int{9}, []int{0}},
		{"Day 5: immediate mode, 7 < 8", "3,3,1107,-1,8,3,4,3,99", []int{3, 3, 1107, 1, 8, 3, 4, 3, 99}, []int{7}, []int{1}},
		{"Day 5: immediate mode, 8 < 8", "3,3,1107,-1,8,3,4,3,99", []int{3, 3, 1107, 0, 8, 3, 4, 3, 99}, []int{8}, []int{0}},
		{"Day 5: immediate mode, 9 < 8", "3,3,1107,-1,8,3,4,3,99", []int{3, 3, 1107, 0, 8, 3, 4, 3, 99}, []int{9}, []int{0}},
		{"Day 5: position mode, -1 == 0", "3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9", []int{3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, -1, 1, 1, 9}, []int{-1}, []int{1}},
		{"Day 5: position mode, 0 == 0", "3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9", []int{3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, 0, 0, 1, 9}, []int{0}, []int{0}},
		{"Day 5: position mode, 1 == 0", "3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9", []int{3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, 1, 1, 1, 9}, []int{1}, []int{1}},
		{"Day 5: position mode, -1 == 0", "3,3,1105,-1,9,1101,0,0,12,4,12,99,1", []int{3, 3, 1105, -1, 9, 1101, 0, 0, 12, 4, 12, 99, 1}, []int{-1}, []int{1}},
		{"Day 5: position mode, 0 == 0", "3,3,1105,-1,9,1101,0,0,12,4,12,99,1", []int{3, 3, 1105, 0, 9, 1101, 0, 0, 12, 4, 12, 99, 0}, []int{0}, []int{0}},
		{"Day 5: position mode, 1 == 0", "3,3,1105,-1,9,1101,0,0,12,4,12,99,1", []int{3, 3, 1105, 1, 9, 1101, 0, 0, 12, 4, 12, 99, 1}, []int{1}, []int{1}},
		{"Day 5: position mode, 0 == 0", "3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99", []int{3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31, 1106, 0, 36, 98, 0, 7, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104, 999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99}, []int{7}, []int{999}},
		{"Day 5: position mode, 0 == 0", "3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99", []int{3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31, 1106, 0, 36, 98, 1000, 8, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104, 999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99}, []int{8}, []int{1000}},
		{"Day 5: position mode, 0 == 0", "3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99", []int{3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31, 1106, 0, 36, 98, 1001, 9, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104, 999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99}, []int{9}, []int{1001}},
		{"Day 9: outputs itself", "109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99", []int{109, 1, 204, -1, 1001, 100, 1, 100, 1008, 100, 16, 101, 1006, 101, 0, 99}, []int{}, []int{109, 1, 204, -1, 1001, 100, 1, 100, 1008, 100, 16, 101, 1006, 101, 0}},
		{"Day 9: output 16-digit number", "1102,34915192,34915192,7,4,7,99,0", []int{1102, 34915192, 34915192, 7, 4, 7, 99, 1219070632396864}, []int{}, []int{1219070632396864}},
		{"Day 9: output 1125899906842624", "104,1125899906842624,99", []int{104, 1125899906842624, 99}, []int{}, []int{1125899906842624}},
	}

	for i, test := range tests {
		in, out, quit := make(chan int), make(chan int), make(chan int)

		sut := NewIntcode(in, out, quit)
		sut.ID = i + 1
		// sut.Debug = true
		sut.Load(test.program)

		var actualOutput []int
		go func() {
			for _, item := range test.input {
				in <- item
			}
			close(in)
		}()

		go func() {
			for {
				select {
				case <-quit:
					return
				case o := <-out:
					actualOutput = append(actualOutput, o)
				}
			}
		}()

		go func() { sut.Run() }()
		<-quit

		if !equal(test.expected, sut.Program) {
			t.Errorf("Test %d, %s: expected %v, actual %v\n", i+1, test.testCase, test.expected, sut.Program)
		}

		if len(test.output) > 0 && !equal(test.output, actualOutput) {
			t.Errorf("Test %d, %s: expected %v, actual %v\n", i+1, test.testCase, test.output, actualOutput)
		}
	}
}

func equal(a, b []int) bool {
	if len(a) > len(b) {
		return false
	}

	for i, j := range a {
		if j != b[i] {
			fmt.Printf("%d: %d != %d\n", i, j, b[i])
			return false
		}
	}

	return true
}
